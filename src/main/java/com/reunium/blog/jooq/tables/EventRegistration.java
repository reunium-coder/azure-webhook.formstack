/*
 * This file is generated by jOOQ.
 */
package com.reunium.blog.jooq.tables;


import com.reunium.blog.jooq.FormStack;
import com.reunium.blog.jooq.Keys;
import com.reunium.blog.jooq.tables.records.EventRegistrationRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventRegistration extends TableImpl<EventRegistrationRecord> {

    private static final long serialVersionUID = -2065017189;

    /**
     * The reference instance of <code>form-stack.event-registration</code>
     */
    public static final EventRegistration EVENT_REGISTRATION = new EventRegistration();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventRegistrationRecord> getRecordType() {
        return EventRegistrationRecord.class;
    }

    /**
     * The column <code>form-stack.event-registration.uniqueID</code>.
     */
    public final TableField<EventRegistrationRecord, String> UNIQUEID = createField(DSL.name("uniqueID"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>form-stack.event-registration.formID</code>.
     */
    public final TableField<EventRegistrationRecord, String> FORMID = createField(DSL.name("formID"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>form-stack.event-registration.personal_information</code>.
     */
    public final TableField<EventRegistrationRecord, String> PERSONAL_INFORMATION = createField(DSL.name("personal_information"), org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>form-stack.event-registration.name_first</code>.
     */
    public final TableField<EventRegistrationRecord, String> NAME_FIRST = createField(DSL.name("name_first"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>form-stack.event-registration.name_last</code>.
     */
    public final TableField<EventRegistrationRecord, String> NAME_LAST = createField(DSL.name("name_last"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>form-stack.event-registration.address_address</code>.
     */
    public final TableField<EventRegistrationRecord, String> ADDRESS_ADDRESS = createField(DSL.name("address_address"), org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>form-stack.event-registration.address_city</code>.
     */
    public final TableField<EventRegistrationRecord, String> ADDRESS_CITY = createField(DSL.name("address_city"), org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>form-stack.event-registration.address_state</code>.
     */
    public final TableField<EventRegistrationRecord, String> ADDRESS_STATE = createField(DSL.name("address_state"), org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>form-stack.event-registration.address_zip</code>.
     */
    public final TableField<EventRegistrationRecord, String> ADDRESS_ZIP = createField(DSL.name("address_zip"), org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>form-stack.event-registration.address_country</code>.
     */
    public final TableField<EventRegistrationRecord, String> ADDRESS_COUNTRY = createField(DSL.name("address_country"), org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>form-stack.event-registration.email</code>.
     */
    public final TableField<EventRegistrationRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>form-stack.event-registration.event_information</code>.
     */
    public final TableField<EventRegistrationRecord, String> EVENT_INFORMATION = createField(DSL.name("event_information"), org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>form-stack.event-registration.will_you_be_attending</code>.
     */
    public final TableField<EventRegistrationRecord, String> WILL_YOU_BE_ATTENDING = createField(DSL.name("will_you_be_attending"), org.jooq.impl.SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>form-stack.event-registration.number_attending</code>.
     */
    public final TableField<EventRegistrationRecord, String> NUMBER_ATTENDING = createField(DSL.name("number_attending"), org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>form-stack.event-registration.amount</code>.
     */
    public final TableField<EventRegistrationRecord, String> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * The column <code>form-stack.event-registration.upload</code>.
     */
    public final TableField<EventRegistrationRecord, String> UPLOAD = createField(DSL.name("upload"), org.jooq.impl.SQLDataType.VARCHAR(512), this, "");

    /**
     * Create a <code>form-stack.event-registration</code> table reference
     */
    public EventRegistration() {
        this(DSL.name("event-registration"), null);
    }

    /**
     * Create an aliased <code>form-stack.event-registration</code> table reference
     */
    public EventRegistration(String alias) {
        this(DSL.name(alias), EVENT_REGISTRATION);
    }

    /**
     * Create an aliased <code>form-stack.event-registration</code> table reference
     */
    public EventRegistration(Name alias) {
        this(alias, EVENT_REGISTRATION);
    }

    private EventRegistration(Name alias, Table<EventRegistrationRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventRegistration(Name alias, Table<EventRegistrationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> EventRegistration(Table<O> child, ForeignKey<O, EventRegistrationRecord> key) {
        super(child, key, EVENT_REGISTRATION);
    }

    @Override
    public Schema getSchema() {
        return FormStack.FORM_STACK;
    }

    @Override
    public UniqueKey<EventRegistrationRecord> getPrimaryKey() {
        return Keys.KEY_EVENT_REGISTRATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<EventRegistrationRecord>> getKeys() {
        return Arrays.<UniqueKey<EventRegistrationRecord>>asList(Keys.KEY_EVENT_REGISTRATION_PRIMARY);
    }

    @Override
    public EventRegistration as(String alias) {
        return new EventRegistration(DSL.name(alias), this);
    }

    @Override
    public EventRegistration as(Name alias) {
        return new EventRegistration(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventRegistration rename(String name) {
        return new EventRegistration(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventRegistration rename(Name name) {
        return new EventRegistration(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
